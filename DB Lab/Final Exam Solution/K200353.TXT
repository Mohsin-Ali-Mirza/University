--Q1
--1
SELECT FIRST_NAME,LAST_NAME,EMPLOYEE_ID,SALARY
FROM EMPLOYEES WHERE MANAGER_ID IN
(SELECT EMPLOYEE_ID FROM EMPLOYEES
WHERE FIRST_NAME = 'Payam');

--2
SELECT * FROM EMPLOYEES
WHERE SALARY> ALL
(SELECT MIN(SALARY)
FROM EMPLOYEES) AND SALARY <2500;

--3
SELECT COUNT (e.EMPLOYEE_ID) , r.REGION_ID
FROM hr.EMPLOYEES e, hr.DEPARTMENTS d, hr.LOCATIONS l, hr.COUNTRIES c, hr.REGIONS r
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID AND d.LOCATION_ID = l.LOCATION_ID AND l.COUNTRY_ID = c.COUNTRY_ID AND c.REGION_ID = r.REGION_ID
GROUP BY r.REGION_ID;

--4
SELECT EMPLOYEE_ID, EXTRACT(YEAR FROM(END_DATE))- EXTRACT(YEAR FROM(START_DATE)) AS TENURE FROM JOB_HISTORY
WHERE EMPLOYEE_ID > ANY (SELECT MANAGER_ID FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL GROUP BY MANAGER_ID);


--5
SELECT * FROM(SELECT E.EMPLOYEE_ID,E.FIRST_NAME, L.CITY,E.SALARY
FROM EMPLOYEES E, LOCATIONS L, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.LOCATION_ID = L.LOCATION_ID AND L.CITY = 'Roma' ORDER BY E.SALARY DESC) WHERE ROWNUM<=1;

--6
SELECT * FROM(
SELECT E.EMPLOYEE_ID,E.FIRST_NAME,E.LAST_NAME,J.JOB_ID AS SALESMAN,J.JOB_TITLE
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_ID AND J.JOB_ID = 'ST_MAN');

SELECT E.EMPLOYEE_ID,E.FIRST_NAME,E.LAST_NAME,J.JOB_ID AS DEVELOPER,J.JOB_TITLE
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_ID AND J.JOB_ID = 'IT_PROG';


--7
-- COMBINE BOTH OF THEM AND SAVE THE COLUMN AS SALARY_STATUS
(SELECT SALARY AS "HIGH"
FROM EMPLOYEES
WHERE SALARY >(SELECT AVG(SALARY) FROM EMPLOYEES));

SELECT SALARY AS "LOW"
FROM EMPLOYEES WHERE SALARY <(SELECT AVG(SALARY) FROM EMPLOYEES);


--8

--FOR ALL DEPT CODES BELONGING TO LONDON
--9
SELECT D.DEPARTMENT_ID,L.CITY FROM DEPARTMENTS D, LOCATIONS L
WHERE D.LOCATION_ID = L.LOCATION_ID AND L.CITY = 'LONDON';

--10
SELECT E.EMPLOYEE_ID, L.CITY
FROM EMPLOYEES E, LOCATIONS L, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.LOCATION_ID = L.LOCATION_ID AND E.EMPLOYEE_ID = 134;



DROP TABLE STUDENT;

CREATE TABLE STUDENT
(
    STUDENT_ID NUMBER NOT NULL,
    STUDENT_NAME VARCHAR(20),
    NEEDED_AMOUNT NUMBER,
    REMAINING_AMOUNT NUMBER,
    SCHOLARSHIP_STATUS VARCHAR(20),
    
    CONSTRAINT "STUDENT_PK" PRIMARY KEY ("STUDENT_ID")
);

INSERT INTO STUDENT VALUES(1,'Alex',100000,0,'Granted');
INSERT INTO STUDENT VALUES(2,'Bob',50000,30000,'Not Granted');
INSERT INTO STUDENT VALUES(3,'James',55000,NULL,'Pending');
INSERT INTO STUDENT VALUES(4,'Richards',60000,30000,'Not Granted');
INSERT INTO STUDENT VALUES(5,'Jimmy',20000,0,'Granted');

DROP TABLE SCHOLARSHIP;

CREATE TABLE SCHOLARSHIP
(
 SCHOLARSHIP_ID NUMBER NOT NULL,
 STUDENT_ID NUMBER NOT NULL,
 TRANSACTION_AMOUNT NUMBER,
 TRANSACTION_DATE DATE,
 
 CONSTRAINT "SCHOLARSHIP_PK" PRIMARY KEY ("SCHOLARSHIP_ID")
);

INSERT INTO SCHOLARSHIP VALUES(1,1,50000,'01-OCT-2021');
INSERT INTO SCHOLARSHIP VALUES(2,1,25000,'15-OCT-2021');
INSERT INTO SCHOLARSHIP VALUES(3,2,25000,'15-NOV-2021');
INSERT INTO SCHOLARSHIP VALUES(4,1,25000,'20-DEC-2021');
INSERT INTO SCHOLARSHIP VALUES(5,2,5000,'05-JAN-2021');
INSERT INTO SCHOLARSHIP VALUES(6,4,30000,'12-FEB-2021');


CREATE OR REPLACE PROCEDURE TASK1(STUD_ID IN STUDENT.STUDENT_ID%TYPE,AMOUNT IN STUDENT.NEEDED_AMOUNT%TYPE)
IS
CHECK_STATUS VARCHAR(20);
NEED_AMOUNT NUMBER;
REMAIN_AMOUNT NUMBER;
GRANTED_AMOUNT NUMBER;
BEGIN
SELECT SCHOLARSHIP_STATUS,NEEDED_AMOUNT,REMAINING_AMOUNT INTO CHECK_STATUS,NEED_AMOUNT,REMAIN_AMOUNT FROM STUDENT WHERE STUDENT_ID = STUD_ID;
--DO THIS OR INSTEAD USE TASK2 TO USE THE COLLECTION
GRANTED_AMOUNT := NEED_AMOUNT-REMAIN_AMOUNT;
DBMS_OUTPUT.PUT_LINE(GRANTED_AMOUNT);
IF(CHECK_STATUS = 'Granted') THEN
DBMS_OUTPUT.PUT_LINE('IT IS ALREADY GRANTED TO THIS STUDENT');
ELSIF(CHECK_STATUS = 'Not Granted') THEN
GRANTED_AMOUNT := GRANTED_AMOUNT+AMOUNT;
DBMS_OUTPUT.PUT_LINE('TOTAL SCHOLARSHIP:' || GRANTED_AMOUNT);
REMAIN_AMOUNT := REMAIN_AMOUNT-AMOUNT;
UPDATE STUDENT SET REMAINING_AMOUNT=REMAIN_AMOUNT WHERE STUDENT_ID = STUD_ID;
IF(REMAIN_AMOUNT <= 0) THEN
UPDATE STUDENT SET SCHOLARSHIP_STATUS='Fully Granted' WHERE STUDENT_ID = STUD_ID;
END IF;
END IF;
END;

SET SERVEROUTPUT ON
DECLARE
SCHOLARSHIP_AMOUNT NUMBER:= 30000;
DUMMY NUMBER :=2;
BEGIN
TASK1(DUMMY,SCHOLARSHIP_AMOUNT);
END;

CREATE OR REPLACE FUNCTION TASK2(STUD_ID IN STUDENT.STUDENT_ID%TYPE)
RETURN NUMBER
IS
GRANTED_AMOUNT NUMBER :=0;
BEGIN
FOR C IN (SELECT TRANSACTION_AMOUNT FROM SCHOLARSHIP WHERE STUDENT_ID = STUD_ID)
LOOP
GRANTED_AMOUNT := GRANTED_AMOUNT + C.TRANSACTION_AMOUNT;
END LOOP;
DBMS_OUTPUT.PUT_LINE(GRANTED_AMOUNT);
RETURN(GRANTED_AMOUNT);
END;






