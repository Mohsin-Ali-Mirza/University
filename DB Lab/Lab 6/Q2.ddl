-- Generated by Oracle SQL Developer Data Modeler 4.1.1.888
--   at:        2022-10-11 23:07:14 PKT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g




CREATE
  TABLE ADMIN
  (
    COLLEGE_CName VARCHAR2 (25) NOT NULL ,
    ADMIN_ID      NUMBER NOT NULL
  ) ;

CREATE TABLE ADMIN_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,COLLEGE_CName VARCHAR2 (25) NOT NULL
 ,ADMIN_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER ADMIN_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec ADMIN_JN%ROWTYPE; 
  blank ADMIN_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.COLLEGE_CName := :NEW.COLLEGE_CName; 
      rec.ADMIN_ID := :NEW.ADMIN_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.COLLEGE_CName := :OLD.COLLEGE_CName; 
      rec.ADMIN_ID := :OLD.ADMIN_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into ADMIN_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE CHAIR
  (
    CStartDate DATE ,
    DEPT_DName VARCHAR2 (25) NOT NULL ,
    DEPT_DCode CHAR (25) NOT NULL ,
    CHAIR_ID   NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX CHAIR__IDX ON CHAIR
  (
    DEPT_DName ASC , DEPT_DCode ASC
  )
  ;

CREATE TABLE CHAIR_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,CStartDate DATE
 ,DEPT_DName VARCHAR2 (25) NOT NULL
 ,DEPT_DCode CHAR (25) NOT NULL
 ,CHAIR_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER CHAIR_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec CHAIR_JN%ROWTYPE; 
  blank CHAIR_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CStartDate := :NEW.CStartDate; 
      rec.DEPT_DName := :NEW.DEPT_DName; 
      rec.DEPT_DCode := :NEW.DEPT_DCode; 
      rec.CHAIR_ID := :NEW.CHAIR_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CStartDate := :OLD.CStartDate; 
      rec.DEPT_DName := :OLD.DEPT_DName; 
      rec.DEPT_DCode := :OLD.DEPT_DCode; 
      rec.CHAIR_ID := :OLD.CHAIR_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into CHAIR_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE COLLEGE
  (
    CName   VARCHAR2 (25) NOT NULL ,
    COffice VARCHAR2 (25) ,
    CPhone  VARCHAR2 (15)
  ) ;

CREATE TABLE COLLEGE_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,CName VARCHAR2 (25) NOT NULL
 ,COffice VARCHAR2 (25)
 ,CPhone VARCHAR2 (15)
 );

CREATE OR REPLACE TRIGGER COLLEGE_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec COLLEGE_JN%ROWTYPE; 
  blank COLLEGE_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CName := :NEW.CName; 
      rec.COffice := :NEW.COffice; 
      rec.CPhone := :NEW.CPhone; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CName := :OLD.CName; 
      rec.COffice := :OLD.COffice; 
      rec.CPhone := :OLD.CPhone; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into COLLEGE_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE COURSE
  (
    CCode             CHAR (25) NOT NULL ,
    Credits           INTEGER ,
    CoName            VARCHAR2 (25) NOT NULL ,
    "Level"           INTEGER ,
    CDesc             VARCHAR2 (25) ,
    OFFERS_DEPT_DName VARCHAR2 (25) NOT NULL ,
    OFFERS_DEPT_DCode CHAR (25) NOT NULL
  ) ;
CREATE UNIQUE INDEX COURSE__IDX ON COURSE
  (
    OFFERS_DEPT_DName ASC , OFFERS_DEPT_DCode ASC
  )
  ;

CREATE TABLE COURSE_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,CCode CHAR (25) NOT NULL
 ,Credits INTEGER
 ,CoName VARCHAR2 (25) NOT NULL
 ,Level INTEGER
 ,CDesc VARCHAR2 (25)
 ,OFFERS_DEPT_DName VARCHAR2 (25) NOT NULL
 ,OFFERS_DEPT_DCode CHAR (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER COURSE_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec COURSE_JN%ROWTYPE; 
  blank COURSE_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.CCode := :NEW.CCode; 
      rec.Credits := :NEW.Credits; 
      rec.CoName := :NEW.CoName; 
      rec.Level := :NEW.Level; 
      rec.CDesc := :NEW.CDesc; 
      rec.OFFERS_DEPT_DName := :NEW.OFFERS_DEPT_DName; 
      rec.OFFERS_DEPT_DCode := :NEW.OFFERS_DEPT_DCode; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.CCode := :OLD.CCode; 
      rec.Credits := :OLD.Credits; 
      rec.CoName := :OLD.CoName; 
      rec.Level := :OLD.Level; 
      rec.CDesc := :OLD.CDesc; 
      rec.OFFERS_DEPT_DName := :OLD.OFFERS_DEPT_DName; 
      rec.OFFERS_DEPT_DCode := :OLD.OFFERS_DEPT_DCode; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into COURSE_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE DEAN
  (
    COLLEGE_CName VARCHAR2 (25) NOT NULL ,
    DEAN_ID       NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX DEAN__IDX ON DEAN
  (
    COLLEGE_CName ASC
  )
  ;

CREATE TABLE DEAN_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,COLLEGE_CName VARCHAR2 (25) NOT NULL
 ,DEAN_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER DEAN_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec DEAN_JN%ROWTYPE; 
  blank DEAN_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.COLLEGE_CName := :NEW.COLLEGE_CName; 
      rec.DEAN_ID := :NEW.DEAN_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.COLLEGE_CName := :OLD.COLLEGE_CName; 
      rec.DEAN_ID := :OLD.DEAN_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into DEAN_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE DEPT
  (
    DName          VARCHAR2 (25) NOT NULL ,
    DCode          CHAR (25) NOT NULL ,
    DOffice        VARCHAR2 (25) ,
    DPhone         VARCHAR2 (15) ,
    ADMIN_ADMIN_ID NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX DEPT__IDX ON DEPT
  (
    ADMIN_ADMIN_ID ASC
  )
  ;

CREATE TABLE DEPT_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,DName VARCHAR2 (25) NOT NULL
 ,DCode CHAR (25) NOT NULL
 ,DOffice VARCHAR2 (25)
 ,DPhone VARCHAR2 (15)
 ,ADMIN_ADMIN_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER DEPT_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec DEPT_JN%ROWTYPE; 
  blank DEPT_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.DName := :NEW.DName; 
      rec.DCode := :NEW.DCode; 
      rec.DOffice := :NEW.DOffice; 
      rec.DPhone := :NEW.DPhone; 
      rec.ADMIN_ADMIN_ID := :NEW.ADMIN_ADMIN_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.DName := :OLD.DName; 
      rec.DCode := :OLD.DCode; 
      rec.DOffice := :OLD.DOffice; 
      rec.DPhone := :OLD.DPhone; 
      rec.ADMIN_ADMIN_ID := :OLD.ADMIN_ADMIN_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into DEPT_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE Department_To_Employs
  (
    DEPT_DName         VARCHAR2 (25) NOT NULL ,
    DEPT_DCode         CHAR (25) NOT NULL ,
    EMPLOYS_EMPLOYS_ID NUMBER NOT NULL
  ) ;

CREATE TABLE Department_To_Employs_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,DEPT_DName VARCHAR2 (25) NOT NULL
 ,DEPT_DCode CHAR (25) NOT NULL
 ,EMPLOYS_EMPLOYS_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER Department_To_Employs_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Department_To_Employs_JN%ROWTYPE; 
  blank Department_To_Employs_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.DEPT_DName := :NEW.DEPT_DName; 
      rec.DEPT_DCode := :NEW.DEPT_DCode; 
      rec.EMPLOYS_EMPLOYS_ID := :NEW.EMPLOYS_EMPLOYS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.DEPT_DName := :OLD.DEPT_DName; 
      rec.DEPT_DCode := :OLD.DEPT_DCode; 
      rec.EMPLOYS_EMPLOYS_ID := :OLD.EMPLOYS_EMPLOYS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Department_To_Employs_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE Department_To_Has
  (
    DEPT_DName VARCHAR2 (25) NOT NULL ,
    DEPT_DCode CHAR (25) NOT NULL ,
    HAS_HAS_ID NUMBER NOT NULL
  ) ;

CREATE TABLE Department_To_Has_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,DEPT_DName VARCHAR2 (25) NOT NULL
 ,DEPT_DCode CHAR (25) NOT NULL
 ,HAS_HAS_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER Department_To_Has_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Department_To_Has_JN%ROWTYPE; 
  blank Department_To_Has_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.DEPT_DName := :NEW.DEPT_DName; 
      rec.DEPT_DCode := :NEW.DEPT_DCode; 
      rec.HAS_HAS_ID := :NEW.HAS_HAS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.DEPT_DName := :OLD.DEPT_DName; 
      rec.DEPT_DCode := :OLD.DEPT_DCode; 
      rec.HAS_HAS_ID := :OLD.HAS_HAS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Department_To_Has_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE EMPLOYS
  (
    EMPLOYS_ID NUMBER NOT NULL
  ) ;

CREATE TABLE EMPLOYS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,EMPLOYS_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER EMPLOYS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec EMPLOYS_JN%ROWTYPE; 
  blank EMPLOYS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.EMPLOYS_ID := :NEW.EMPLOYS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.EMPLOYS_ID := :OLD.EMPLOYS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into EMPLOYS_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE HAS
  (
    HAS_ID NUMBER NOT NULL
  ) ;

CREATE TABLE HAS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,HAS_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER HAS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec HAS_JN%ROWTYPE; 
  blank HAS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.HAS_ID := :NEW.HAS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.HAS_ID := :OLD.HAS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into HAS_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE Has_To_Student
  (
    HAS_HAS_ID  NUMBER NOT NULL ,
    STUDENT_SID CHAR (25) NOT NULL
  ) ;

CREATE TABLE Has_To_Student_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,HAS_HAS_ID NUMBER NOT NULL
 ,STUDENT_SID CHAR (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER Has_To_Student_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Has_To_Student_JN%ROWTYPE; 
  blank Has_To_Student_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.HAS_HAS_ID := :NEW.HAS_HAS_ID; 
      rec.STUDENT_SID := :NEW.STUDENT_SID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.HAS_HAS_ID := :OLD.HAS_HAS_ID; 
      rec.STUDENT_SID := :OLD.STUDENT_SID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Has_To_Student_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE INSTRUCTOR
  (
    ID                 CHAR (25) NOT NULL ,
    Rank               VARCHAR2 (25) ,
    Iname              VARCHAR2 (25) ,
    IOffice            VARCHAR2 (25) ,
    IPhone             VARCHAR2 (15) ,
    CHAIR_CHAIR_ID     NUMBER NOT NULL ,
    DEAN_DEAN_ID       NUMBER NOT NULL ,
    EMPLOYS_EMPLOYS_ID NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX INSTRUCTOR__IDX ON INSTRUCTOR
  (
    CHAIR_CHAIR_ID ASC
  )
  ;
CREATE UNIQUE INDEX INSTRUCTOR__IDXv1 ON INSTRUCTOR
  (
    EMPLOYS_EMPLOYS_ID ASC
  )
  ;

CREATE TABLE INSTRUCTOR_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID CHAR (25) NOT NULL
 ,Rank VARCHAR2 (25)
 ,Iname VARCHAR2 (25)
 ,IOffice VARCHAR2 (25)
 ,IPhone VARCHAR2 (15)
 ,CHAIR_CHAIR_ID NUMBER NOT NULL
 ,DEAN_DEAN_ID NUMBER NOT NULL
 ,EMPLOYS_EMPLOYS_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER INSTRUCTOR_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec INSTRUCTOR_JN%ROWTYPE; 
  blank INSTRUCTOR_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID := :NEW.ID; 
      rec.Rank := :NEW.Rank; 
      rec.Iname := :NEW.Iname; 
      rec.IOffice := :NEW.IOffice; 
      rec.IPhone := :NEW.IPhone; 
      rec.CHAIR_CHAIR_ID := :NEW.CHAIR_CHAIR_ID; 
      rec.DEAN_DEAN_ID := :NEW.DEAN_DEAN_ID; 
      rec.EMPLOYS_EMPLOYS_ID := :NEW.EMPLOYS_EMPLOYS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID := :OLD.ID; 
      rec.Rank := :OLD.Rank; 
      rec.Iname := :OLD.Iname; 
      rec.IOffice := :OLD.IOffice; 
      rec.IPhone := :OLD.IPhone; 
      rec.CHAIR_CHAIR_ID := :OLD.CHAIR_CHAIR_ID; 
      rec.DEAN_DEAN_ID := :OLD.DEAN_DEAN_ID; 
      rec.EMPLOYS_EMPLOYS_ID := :OLD.EMPLOYS_EMPLOYS_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into INSTRUCTOR_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE OFFERS
  (
    DEPT_DName VARCHAR2 (25) NOT NULL ,
    DEPT_DCode CHAR (25) NOT NULL
  ) ;

CREATE TABLE OFFERS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,DEPT_DName VARCHAR2 (25) NOT NULL
 ,DEPT_DCode CHAR (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER OFFERS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec OFFERS_JN%ROWTYPE; 
  blank OFFERS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.DEPT_DName := :NEW.DEPT_DName; 
      rec.DEPT_DCode := :NEW.DEPT_DCode; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.DEPT_DName := :OLD.DEPT_DName; 
      rec.DEPT_DCode := :OLD.DEPT_DCode; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into OFFERS_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE SECS
  (
    COURSE_CCode  CHAR (25) NOT NULL ,
    COURSE_CoName VARCHAR2 (25) NOT NULL
  ) ;

CREATE TABLE SECS_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,COURSE_CCode CHAR (25) NOT NULL
 ,COURSE_CoName VARCHAR2 (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER SECS_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec SECS_JN%ROWTYPE; 
  blank SECS_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.COURSE_CCode := :NEW.COURSE_CCode; 
      rec.COURSE_CoName := :NEW.COURSE_CoName; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.COURSE_CCode := :OLD.COURSE_CCode; 
      rec.COURSE_CoName := :OLD.COURSE_CoName; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into SECS_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE SECTION
  (
    SecId                 CHAR (25) NOT NULL ,
    SecNo                 INTEGER ,
    Sem                   INTEGER ,
    YEAR                  DATE ,
    RoomNo                VARCHAR2 (10) ,
    CRoom                 VARCHAR2 (10) ,
    BIdg                  VARCHAR2 (25) ,
    DaysTime              DATE ,
    SECS_COURSE_CCode     CHAR (25) NOT NULL ,
    SECS_COURSE_CoName    VARCHAR2 (25) NOT NULL ,
    TEACHES_INSTRUCTOR_ID CHAR (25) NOT NULL
  ) ;
CREATE UNIQUE INDEX SECTION__IDX ON SECTION
  (
    SECS_COURSE_CCode ASC , SECS_COURSE_CoName ASC
  )
  ;
CREATE UNIQUE INDEX SECTION__IDXv1 ON SECTION
  (
    TEACHES_INSTRUCTOR_ID ASC
  )
  ;

CREATE TABLE SECTION_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,SecId CHAR (25) NOT NULL
 ,SecNo INTEGER
 ,Sem INTEGER
 ,Year DATE
 ,RoomNo VARCHAR2 (10)
 ,CRoom VARCHAR2 (10)
 ,BIdg VARCHAR2 (25)
 ,DaysTime DATE
 ,SECS_COURSE_CCode CHAR (25) NOT NULL
 ,SECS_COURSE_CoName VARCHAR2 (25) NOT NULL
 ,TEACHES_INSTRUCTOR_ID CHAR (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER SECTION_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec SECTION_JN%ROWTYPE; 
  blank SECTION_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.SecId := :NEW.SecId; 
      rec.SecNo := :NEW.SecNo; 
      rec.Sem := :NEW.Sem; 
      rec.Year := :NEW.Year; 
      rec.RoomNo := :NEW.RoomNo; 
      rec.CRoom := :NEW.CRoom; 
      rec.BIdg := :NEW.BIdg; 
      rec.DaysTime := :NEW.DaysTime; 
      rec.SECS_COURSE_CCode := :NEW.SECS_COURSE_CCode; 
      rec.SECS_COURSE_CoName := :NEW.SECS_COURSE_CoName; 
      rec.TEACHES_INSTRUCTOR_ID := :NEW.TEACHES_INSTRUCTOR_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.SecId := :OLD.SecId; 
      rec.SecNo := :OLD.SecNo; 
      rec.Sem := :OLD.Sem; 
      rec.Year := :OLD.Year; 
      rec.RoomNo := :OLD.RoomNo; 
      rec.CRoom := :OLD.CRoom; 
      rec.BIdg := :OLD.BIdg; 
      rec.DaysTime := :OLD.DaysTime; 
      rec.SECS_COURSE_CCode := :OLD.SECS_COURSE_CCode; 
      rec.SECS_COURSE_CoName := :OLD.SECS_COURSE_CoName; 
      rec.TEACHES_INSTRUCTOR_ID := :OLD.TEACHES_INSTRUCTOR_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into SECTION_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE STUDENT
  (
    Fname VARCHAR2 (25) ,
    MName VARCHAR2 (25) ,
    LName VARCHAR2 (25) ,
    SID   CHAR (25) NOT NULL ,
    DOB   DATE ,
    Addr  VARCHAR2 (25) ,
    Phone VARCHAR2 (15) ,
    Major VARCHAR2 (25)
  ) ;

CREATE TABLE STUDENT_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Fname VARCHAR2 (25)
 ,MName VARCHAR2 (25)
 ,LName VARCHAR2 (25)
 ,SID CHAR (25) NOT NULL
 ,DOB DATE
 ,Addr VARCHAR2 (25)
 ,Phone VARCHAR2 (15)
 ,Major VARCHAR2 (25)
 );

CREATE OR REPLACE TRIGGER STUDENT_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec STUDENT_JN%ROWTYPE; 
  blank STUDENT_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Fname := :NEW.Fname; 
      rec.MName := :NEW.MName; 
      rec.LName := :NEW.LName; 
      rec.SID := :NEW.SID; 
      rec.DOB := :NEW.DOB; 
      rec.Addr := :NEW.Addr; 
      rec.Phone := :NEW.Phone; 
      rec.Major := :NEW.Major; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Fname := :OLD.Fname; 
      rec.MName := :OLD.MName; 
      rec.LName := :OLD.LName; 
      rec.SID := :OLD.SID; 
      rec.DOB := :OLD.DOB; 
      rec.Addr := :OLD.Addr; 
      rec.Phone := :OLD.Phone; 
      rec.Major := :OLD.Major; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into STUDENT_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE Student_To_Takes
  (
    STUDENT_SID    CHAR (25) NOT NULL ,
    TAKES_TAKES_ID NUMBER NOT NULL
  ) ;

CREATE TABLE Student_To_Takes_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,STUDENT_SID CHAR (25) NOT NULL
 ,TAKES_TAKES_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER Student_To_Takes_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Student_To_Takes_JN%ROWTYPE; 
  blank Student_To_Takes_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.STUDENT_SID := :NEW.STUDENT_SID; 
      rec.TAKES_TAKES_ID := :NEW.TAKES_TAKES_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.STUDENT_SID := :OLD.STUDENT_SID; 
      rec.TAKES_TAKES_ID := :OLD.TAKES_TAKES_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Student_To_Takes_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE TAKES
  (
    Grade    VARCHAR2 (3) ,
    TAKES_ID NUMBER NOT NULL
  ) ;

CREATE TABLE TAKES_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Grade VARCHAR2 (3)
 ,TAKES_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER TAKES_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec TAKES_JN%ROWTYPE; 
  blank TAKES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Grade := :NEW.Grade; 
      rec.TAKES_ID := :NEW.TAKES_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Grade := :OLD.Grade; 
      rec.TAKES_ID := :OLD.TAKES_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into TAKES_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE TEACHES
  (
    INSTRUCTOR_ID CHAR (25) NOT NULL
  ) ;

CREATE TABLE TEACHES_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,INSTRUCTOR_ID CHAR (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER TEACHES_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec TEACHES_JN%ROWTYPE; 
  blank TEACHES_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.INSTRUCTOR_ID := :NEW.INSTRUCTOR_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.INSTRUCTOR_ID := :OLD.INSTRUCTOR_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into TEACHES_JN VALUES rec; 
  END; 
  /
CREATE
  TABLE Takes_To_Secton
  (
    TAKES_TAKES_ID NUMBER NOT NULL ,
    SECTION_SecId  CHAR (25) NOT NULL
  ) ;

CREATE TABLE Takes_To_Secton_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,TAKES_TAKES_ID NUMBER NOT NULL
 ,SECTION_SecId CHAR (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER Takes_To_Secton_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Takes_To_Secton_JN%ROWTYPE; 
  blank Takes_To_Secton_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.TAKES_TAKES_ID := :NEW.TAKES_TAKES_ID; 
      rec.SECTION_SecId := :NEW.SECTION_SecId; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.TAKES_TAKES_ID := :OLD.TAKES_TAKES_ID; 
      rec.SECTION_SecId := :OLD.SECTION_SecId; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Takes_To_Secton_JN VALUES rec; 
  END; 
  /
ALTER TABLE ADMIN ADD CONSTRAINT ADMIN_COLLEGE_FK FOREIGN KEY ( COLLEGE_CName )
REFERENCES COLLEGE ( CName ) ;

ALTER TABLE CHAIR ADD CONSTRAINT CHAIR_DEPT_FK FOREIGN KEY ( DEPT_DName,
DEPT_DCode ) REFERENCES DEPT ( DName, DCode ) ;

ALTER TABLE COURSE ADD CONSTRAINT COURSE_OFFERS_FK FOREIGN KEY (
OFFERS_DEPT_DName, OFFERS_DEPT_DCode ) REFERENCES OFFERS ( DEPT_DName,
DEPT_DCode ) ;

ALTER TABLE DEAN ADD CONSTRAINT DEAN_COLLEGE_FK FOREIGN KEY ( COLLEGE_CName )
REFERENCES COLLEGE ( CName ) ;

ALTER TABLE DEPT ADD CONSTRAINT DEPT_ADMIN_FK FOREIGN KEY ( ADMIN_ADMIN_ID )
REFERENCES ADMIN ( ADMIN_ID ) ;

ALTER TABLE Department_To_Has ADD CONSTRAINT FK_ASS_10 FOREIGN KEY ( DEPT_DName
, DEPT_DCode ) REFERENCES DEPT ( DName, DCode ) ;

ALTER TABLE Department_To_Has ADD CONSTRAINT FK_ASS_11 FOREIGN KEY ( HAS_HAS_ID
) REFERENCES HAS ( HAS_ID ) ;

ALTER TABLE Has_To_Student ADD CONSTRAINT FK_ASS_14 FOREIGN KEY ( HAS_HAS_ID )
REFERENCES HAS ( HAS_ID ) ;

ALTER TABLE Has_To_Student ADD CONSTRAINT FK_ASS_15 FOREIGN KEY ( STUDENT_SID )
REFERENCES STUDENT ( SID ) ;

ALTER TABLE Student_To_Takes ADD CONSTRAINT FK_ASS_19 FOREIGN KEY ( STUDENT_SID
) REFERENCES STUDENT ( SID ) ;

ALTER TABLE Student_To_Takes ADD CONSTRAINT FK_ASS_20 FOREIGN KEY (
TAKES_TAKES_ID ) REFERENCES TAKES ( TAKES_ID ) ;

ALTER TABLE Takes_To_Secton ADD CONSTRAINT FK_ASS_21 FOREIGN KEY (
TAKES_TAKES_ID ) REFERENCES TAKES ( TAKES_ID ) ;

ALTER TABLE Takes_To_Secton ADD CONSTRAINT FK_ASS_22 FOREIGN KEY (
SECTION_SecId ) REFERENCES SECTION ( SecId ) ;

ALTER TABLE Department_To_Employs ADD CONSTRAINT FK_ASS_8 FOREIGN KEY (
DEPT_DName, DEPT_DCode ) REFERENCES DEPT ( DName, DCode ) ;

ALTER TABLE Department_To_Employs ADD CONSTRAINT FK_ASS_9 FOREIGN KEY (
EMPLOYS_EMPLOYS_ID ) REFERENCES EMPLOYS ( EMPLOYS_ID ) ;

ALTER TABLE INSTRUCTOR ADD CONSTRAINT INSTRUCTOR_CHAIR_FK FOREIGN KEY (
CHAIR_CHAIR_ID ) REFERENCES CHAIR ( CHAIR_ID ) ;

ALTER TABLE INSTRUCTOR ADD CONSTRAINT INSTRUCTOR_DEAN_FK FOREIGN KEY (
DEAN_DEAN_ID ) REFERENCES DEAN ( DEAN_ID ) ;

ALTER TABLE INSTRUCTOR ADD CONSTRAINT INSTRUCTOR_EMPLOYS_FK FOREIGN KEY (
EMPLOYS_EMPLOYS_ID ) REFERENCES EMPLOYS ( EMPLOYS_ID ) ;

ALTER TABLE OFFERS ADD CONSTRAINT OFFERS_DEPT_FK FOREIGN KEY ( DEPT_DName,
DEPT_DCode ) REFERENCES DEPT ( DName, DCode ) ;

ALTER TABLE SECS ADD CONSTRAINT SECS_COURSE_FK FOREIGN KEY ( COURSE_CCode,
COURSE_CoName ) REFERENCES COURSE ( CCode, CoName ) ;

ALTER TABLE SECTION ADD CONSTRAINT SECTION_SECS_FK FOREIGN KEY (
SECS_COURSE_CCode, SECS_COURSE_CoName ) REFERENCES SECS ( COURSE_CCode,
COURSE_CoName ) ;

ALTER TABLE SECTION ADD CONSTRAINT SECTION_TEACHES_FK FOREIGN KEY (
TEACHES_INSTRUCTOR_ID ) REFERENCES TEACHES ( INSTRUCTOR_ID ) ;

ALTER TABLE TEACHES ADD CONSTRAINT TEACHES_INSTRUCTOR_FK FOREIGN KEY (
INSTRUCTOR_ID ) REFERENCES INSTRUCTOR ( ID ) ;

CREATE SEQUENCE ADMIN_ADMIN_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER ADMIN_ADMIN_ID_TRG BEFORE
  INSERT
    ON ADMIN FOR EACH ROW WHEN
    (
      NEW.ADMIN_ID IS NULL
    )
    BEGIN :NEW.ADMIN_ID := ADMIN_ADMIN_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE CHAIR_CHAIR_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER CHAIR_CHAIR_ID_TRG BEFORE
  INSERT
    ON CHAIR FOR EACH ROW WHEN
    (
      NEW.CHAIR_ID IS NULL
    )
    BEGIN :NEW.CHAIR_ID := CHAIR_CHAIR_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE DEAN_DEAN_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER DEAN_DEAN_ID_TRG BEFORE
  INSERT
    ON DEAN FOR EACH ROW WHEN
    (
      NEW.DEAN_ID IS NULL
    )
    BEGIN :NEW.DEAN_ID := DEAN_DEAN_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE EMPLOYS_EMPLOYS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER EMPLOYS_EMPLOYS_ID_TRG BEFORE
  INSERT
    ON EMPLOYS FOR EACH ROW WHEN
    (
      NEW.EMPLOYS_ID IS NULL
    )
    BEGIN :NEW.EMPLOYS_ID := EMPLOYS_EMPLOYS_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE HAS_HAS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER HAS_HAS_ID_TRG BEFORE
  INSERT
    ON HAS FOR EACH ROW WHEN
    (
      NEW.HAS_ID IS NULL
    )
    BEGIN :NEW.HAS_ID := HAS_HAS_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE TAKES_TAKES_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER TAKES_TAKES_ID_TRG BEFORE
  INSERT
    ON TAKES FOR EACH ROW WHEN
    (
      NEW.TAKES_ID IS NULL
    )
    BEGIN :NEW.TAKES_ID := TAKES_TAKES_ID_SEQ.NEXTVAL;
END;
/


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            20
-- CREATE INDEX                             8
-- ALTER TABLE                             23
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          6
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
