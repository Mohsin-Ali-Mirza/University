-- Generated by Oracle SQL Developer Data Modeler 4.1.1.888
--   at:        2022-10-13 22:35:41 PKT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g




CREATE TABLE Authors
  (
    Email            VARCHAR2 (25) NOT NULL ,
    First_Name       VARCHAR2 (25) ,
    Last_Name        VARCHAR2 (25) ,
    Rating_Rating_ID NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX Authors__IDX ON Authors
  (
    Rating_Rating_ID ASC
  )
  ;

CREATE TABLE Authors_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Email VARCHAR2 (25) NOT NULL
 ,First_Name VARCHAR2 (25)
 ,Last_Name VARCHAR2 (25)
 ,Rating_Rating_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER Authors_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Authors_JN%ROWTYPE; 
  blank Authors_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Email := :NEW.Email; 
      rec.First_Name := :NEW.First_Name; 
      rec.Last_Name := :NEW.Last_Name; 
      rec.Rating_Rating_ID := :NEW.Rating_Rating_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Email := :OLD.Email; 
      rec.First_Name := :OLD.First_Name; 
      rec.Last_Name := :OLD.Last_Name; 
      rec.Rating_Rating_ID := :OLD.Rating_Rating_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Authors_JN VALUES rec; 
  END; 
  /
CREATE TABLE Authors_To_Paper
  (
    Authors_Email  VARCHAR2 (25) NOT NULL ,
    Paper_SystemID CHAR (25) NOT NULL
  ) ;

CREATE TABLE Authors_To_Paper_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Authors_Email VARCHAR2 (25) NOT NULL
 ,Paper_SystemID CHAR (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER Authors_To_Paper_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Authors_To_Paper_JN%ROWTYPE; 
  blank Authors_To_Paper_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Authors_Email := :NEW.Authors_Email; 
      rec.Paper_SystemID := :NEW.Paper_SystemID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Authors_Email := :OLD.Authors_Email; 
      rec.Paper_SystemID := :OLD.Paper_SystemID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Authors_To_Paper_JN VALUES rec; 
  END; 
  /
CREATE TABLE Paper
  (
    SystemID  CHAR (25) NOT NULL ,
    Title     VARCHAR2 (25) ,
    Abstract  VARCHAR2 (25) ,
    File_Name VARCHAR2 (25)
  ) ;

CREATE TABLE Paper_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,SystemID CHAR (25) NOT NULL
 ,Title VARCHAR2 (25)
 ,Abstract VARCHAR2 (25)
 ,File_Name VARCHAR2 (25)
 );

CREATE OR REPLACE TRIGGER Paper_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Paper_JN%ROWTYPE; 
  blank Paper_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.SystemID := :NEW.SystemID; 
      rec.Title := :NEW.Title; 
      rec.Abstract := :NEW.Abstract; 
      rec.File_Name := :NEW.File_Name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.SystemID := :OLD.SystemID; 
      rec.Title := :OLD.Title; 
      rec.Abstract := :OLD.Abstract; 
      rec.File_Name := :OLD.File_Name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Paper_JN VALUES rec; 
  END; 
  /
CREATE TABLE Paper_To_Reviewers
  (
    Paper_SystemID  CHAR (25) NOT NULL ,
    Reviewers_Email VARCHAR2 (25) NOT NULL
  ) ;

CREATE TABLE Paper_To_Reviewers_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Paper_SystemID CHAR (25) NOT NULL
 ,Reviewers_Email VARCHAR2 (25) NOT NULL
 );

CREATE OR REPLACE TRIGGER Paper_To_Reviewers_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Paper_To_Reviewers_JN%ROWTYPE; 
  blank Paper_To_Reviewers_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Paper_SystemID := :NEW.Paper_SystemID; 
      rec.Reviewers_Email := :NEW.Reviewers_Email; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Paper_SystemID := :OLD.Paper_SystemID; 
      rec.Reviewers_Email := :OLD.Reviewers_Email; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Paper_To_Reviewers_JN VALUES rec; 
  END; 
  /
CREATE TABLE Rating
  (
    Technical_Merit INTEGER ,
    Readibility     INTEGER ,
    Originality     INTEGER ,
    Revelance       INTEGER ,
    Comments        VARCHAR2 (30) ,
    Reviewers_Email VARCHAR2 (25) NOT NULL ,
    Rating_ID       NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX Rating__IDX ON Rating
  (
    Reviewers_Email ASC
  )
  ;

CREATE TABLE Rating_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Technical_Merit INTEGER
 ,Readibility INTEGER
 ,Originality INTEGER
 ,Revelance INTEGER
 ,Comments VARCHAR2 (30)
 ,Reviewers_Email VARCHAR2 (25) NOT NULL
 ,Rating_ID NUMBER NOT NULL
 );

CREATE OR REPLACE TRIGGER Rating_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Rating_JN%ROWTYPE; 
  blank Rating_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Technical_Merit := :NEW.Technical_Merit; 
      rec.Readibility := :NEW.Readibility; 
      rec.Originality := :NEW.Originality; 
      rec.Revelance := :NEW.Revelance; 
      rec.Comments := :NEW.Comments; 
      rec.Reviewers_Email := :NEW.Reviewers_Email; 
      rec.Rating_ID := :NEW.Rating_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Technical_Merit := :OLD.Technical_Merit; 
      rec.Readibility := :OLD.Readibility; 
      rec.Originality := :OLD.Originality; 
      rec.Revelance := :OLD.Revelance; 
      rec.Comments := :OLD.Comments; 
      rec.Reviewers_Email := :OLD.Reviewers_Email; 
      rec.Rating_ID := :OLD.Rating_ID; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Rating_JN VALUES rec; 
  END; 
  /
CREATE TABLE Reviewers
  (
    Email             VARCHAR2 (25) NOT NULL ,
    First_Name        VARCHAR2 (25) ,
    Last_Name         VARCHAR2 (25) ,
    PhoneNo           VARCHAR2 (15) ,
    Affliation        VARCHAR2 (25) ,
    Topic_Of_Interest VARCHAR2 (25)
  ) ;

CREATE TABLE Reviewers_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Email VARCHAR2 (25) NOT NULL
 ,First_Name VARCHAR2 (25)
 ,Last_Name VARCHAR2 (25)
 ,PhoneNo VARCHAR2 (15)
 ,Affliation VARCHAR2 (25)
 ,Topic_Of_Interest VARCHAR2 (25)
 );

CREATE OR REPLACE TRIGGER Reviewers_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON emp2 for each row 
 Declare 
  rec Reviewers_JN%ROWTYPE; 
  blank Reviewers_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Email := :NEW.Email; 
      rec.First_Name := :NEW.First_Name; 
      rec.Last_Name := :NEW.Last_Name; 
      rec.PhoneNo := :NEW.PhoneNo; 
      rec.Affliation := :NEW.Affliation; 
      rec.Topic_Of_Interest := :NEW.Topic_Of_Interest; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Email := :OLD.Email; 
      rec.First_Name := :OLD.First_Name; 
      rec.Last_Name := :OLD.Last_Name; 
      rec.PhoneNo := :OLD.PhoneNo; 
      rec.Affliation := :OLD.Affliation; 
      rec.Topic_Of_Interest := :OLD.Topic_Of_Interest; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Reviewers_JN VALUES rec; 
  END; 
  /
ALTER TABLE Authors ADD CONSTRAINT Authors_Rating_FK FOREIGN KEY ( Rating_Rating_ID ) REFERENCES Rating ( Rating_ID ) ;

ALTER TABLE Authors_To_Paper ADD CONSTRAINT FK_ASS_1 FOREIGN KEY ( Authors_Email ) REFERENCES Authors ( Email ) ;

ALTER TABLE Authors_To_Paper ADD CONSTRAINT FK_ASS_2 FOREIGN KEY ( Paper_SystemID ) REFERENCES Paper ( SystemID ) ;

ALTER TABLE Paper_To_Reviewers ADD CONSTRAINT FK_ASS_3 FOREIGN KEY ( Paper_SystemID ) REFERENCES Paper ( SystemID ) ;

ALTER TABLE Paper_To_Reviewers ADD CONSTRAINT FK_ASS_4 FOREIGN KEY ( Reviewers_Email ) REFERENCES Reviewers ( Email ) ;

ALTER TABLE Rating ADD CONSTRAINT Rating_Reviewers_FK FOREIGN KEY ( Reviewers_Email ) REFERENCES Reviewers ( Email ) ;

CREATE SEQUENCE Rating_Rating_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Rating_Rating_ID_TRG BEFORE
  INSERT ON Rating FOR EACH ROW WHEN (NEW.Rating_ID IS NULL) BEGIN :NEW.Rating_ID := Rating_Rating_ID_SEQ.NEXTVAL;
END;
/


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                             2
-- ALTER TABLE                              6
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           1
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          1
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
