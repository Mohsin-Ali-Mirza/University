********************************* Q3 C++ *******************************
#include <stdio.h>
// extern "C" instruct the compiler to use C calling conventions
extern "C" void clear();
int main()
{
clear();
//define variables
unsigned short src_opnd, dst_opnd, src_rslt, dst_rslt;
printf("Enter two 4-digit hex numbers - src, dst: \n");
scanf_s("%hX %hX", &src_opnd, &dst_opnd); // in scanf_s it is necessary to
//specifiy length
//switch to assembly
_asm
{
MOV AX, src_opnd
MOV BX, dst_opnd
SHRD BX, AX, 10; shift AX : BX right 10 bits
MOV src_rslt, AX
MOV dst_rslt, BX
}
printf("\nSource result = %X\n Destination result = %X\n\n", src_rslt, dst_rslt);
return 0;
}

********************************* Q3 ASM *************************************
.686 ;Target processor. Use instructions for Pentium class machines
.MODEL FLAT, C ;Use the flat memory model. Use C calling conventions
.STACK 2048 ;Define a stack segment of 1KB (Not required for this example)
.DATA ;Create a near data segment. Local variables are declared after

;this directive (Not required for this example)

var_1 dword 10
str_1 byte 50,100,34,5,6,78,12,45,67
str_2 byte 5000 dup(?)
.CODE ;Indicates the start of a code segment.
clear PROC
xor eax, eax
xor ebx, ebx
ret
clear ENDP
END
******************************** Q2 *****************************
#include <iostream>
using namespace std;
// extern "C" instruct the compiler to use C calling conventions
//extern "C" void ThreeProd();

void product(int  a, int  b, int c, int &res)
{
	int temp = res;
	_asm
	{
		MOV EAX, a
		MOV EBX, b
		mul EBX
		Mov EBX, c
		mul EBX
		MOV temp, EAX
	}
	res = temp;
}


int main()
{
	///clear();
	//define variables
	int  a, b, c;
	int  res = 0;
	cout << "Enter 3 numbers:";
	cin >> a;

	cin >> b;
	cin >> c;
	product(a, b,c,res);
	cout << "\nSource result = " << res;
	return 0;
}


******************************************** Q3 C++ *******************************
#include <iostream>
using namespace std;
// extern "C" instruct the compiler to use C calling conventions
extern "C" void gcd(int a,int b);



int main()
{
	///clear();
	//define variables
	int  a, b,res;
	cout << "Enter 2 numbers:";
	cin >> a;
	cin >> b;
	gcd(a,b);
	_asm
	{
		mov res,eax
	}
	cout << "The GCD Is:" << res;
	return 0;
}

********************************* Q3 ASM *************************************
.686 
.MODEL FLAT, C 
.STACK 2048 
.DATA 
.code

gcd PROTO a:dword, b:dword

gcd PROC a:dword, b:dword
mov edx,a
mov ebx,b

cmp a,0
je l1

cmp b,0
je l2

cmp a,ebx
je l2

jmp continue

l1:
mov eax,b
ret 8

l2:
mov eax,a
ret 8

continue:
cmp a,ebx
ja condition1

condition2:
sub ebx,a
invoke gcd, a,ebx
jmp quit

condition1:
sub edx,b
invoke gcd, edx,b
jmp quit


quit:
ret
gcd ENDP
END
