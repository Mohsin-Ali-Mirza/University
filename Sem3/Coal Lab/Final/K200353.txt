------------------------------------------------------------------- Q1 ---------------------------------------------------
Include Irvine32.inc

.data
str1 byte "Enter First Grade:",0
str2 byte "Enter Second Grade:",0
str3 byte "Enter Third Grade:",0
str4 byte "Enter Fourth Grade:",0
str5 byte "Sum:",0
str6 byte "Avg:",0


arr dword 5 DUP(0)

avg byte 0
sum dword 0

.code
main PROC


mov esi,0
mov edx,offset str1
call writestring
call readchar
call grades
mov arr[esi*type arr],eax
inc esi


mov edx,offset str2
call writestring
call readchar
call grades
mov arr[esi*type arr],eax
inc esi


mov edx,offset str3
call writestring
call readchar
call grades
mov arr[esi*type arr],eax
inc esi


mov edx,offset str4
call writestring
call readchar
call grades
mov arr[esi*type arr],eax
inc esi

mov arr[esi*type arr],eax

mov esi,0
mov ecx,lengthof arr
l2:
mov eax, arr[esi*type arr]
add sum,eax

inc esi
loop l2

mov eax,sum
mov bl,5
div bl
mov avg,al


mov edx,offset str5
call writestring
mov eax,sum
call writedec
call crlf


mov edx,offset str6
call writestring
movzx eax,avg
call writedec
call crlf


exit
main ENDP
grades PROC

mov ebx,'A'
cmp al,bl
je l1

mov ebx,'B'
cmp al,bl
je l2

mov ebx,'C'
cmp al,bl
je l3

mov ebx,'D'
cmp al,bl
je l4

mov ebx,'E'
cmp al,bl
je l5
jmp quit

l1:
mov eax,90
jmp quit

l2:
mov eax,80
jmp quit

l3:
mov eax,70
jmp quit

l4:
mov eax,60
jmp quit

l5:
mov eax,55
jmp quit

quit:
ret
grades ENDP
end main

------------------------------------------------------------------- Q2 ---------------------------------------------------
Include Irvine32.inc

.data 
str1 byte "Enter String:",0


.code
main PROC
mov ecx, 61h
mov edx,offset str1
call writestring
call readchar
call crlf
movzx ebx,al

cmp ebx,66h
ja quit
cmp ebx,30h
jb quit

cmp ebx,30h
jae l3 
jmp l4

l3:
cmp ebx,39h
jbe digits

l4:
cmp ebx,ecx
jae convert
jmp continue

convert:
sub ebx,20h

continue:
sub bl,31h


print:
mov eax,ebx
call writehex
jmp quit

digits:
sub ebx,30h
mov eax, ebx
call writehex


quit:
exit
main ENDP
end main

------------------------------------------------------------------- Q3 ---------------------------------------------------
Include Irvine32.inc

.data
x sdword 0

.code
main PROC

mov edx,5
mov ecx,3
mov ebx,3

cmp ebx,ecx
ja l1
jmp l2

l1:
mov x,1
jmp continue

l2:
mov x,-1
jmp continue


continue:
jmp checkCondition


do:
inc x

checkCondition:
cmp ebx,ecx
ja do
cmp ebx,edx
jae quit
cmp x,5
jl do


quit:
mov eax,x
call writeint
exit
main ENDP
end main


------------------------------------------------------------------- Q5 ---------------------------------------------------
#include <iostream>
using namespace std;

int main()
{
	int n, i,s;
	unsigned long int fact = 1;
	cout << "Enter A postivie 1 and 12:";
	cin >> n;

	_asm
	{
		mov esi,1
		mov ecx,n
		mov eax,fact
		l1:
		mul esi

		inc esi
		loop l1
		mov fact,eax
	}

	cout << "Factorial is:" << fact;

	
		

	return 0;
}
------------------------------------------------------------------- Q6 ---------------------------------------------------
Include Irvine32.inc

.data
targetStr byte "TSAF",10 DUP(0)
sourceStr byte "SECUN",0
flipStr byte lengthof targetStr
lengthSize dword ?

.code

Str_concat_rev PROTO src:ptr byte, des:ptr byte, n:byte,sizeN:dword, rev:ptr byte

main PROC

mov esi,0
mov ecx,lengthof targetStr
mov eax," "
l1:
cmp targetStr[esi],0
je continue

inc esi
loop l1
mov lengthSize,esi

continue:
invoke Str_concat_rev,ADDR sourceStr,ADDR targetStr,lengthof sourceStr,lengthSize,ADDR flipStr

exit
main ENDP

Str_concat_rev PROC src:ptr byte, des:ptr byte, n:byte,sizeN:dword,rev:ptr byte

cld
mov esi,src
mov edi,des
movzx ecx,n
mov edx,4				; make it general
add edi,edx
rep movsb 

mov edx,des
call writestring
call crlf

mov esi,des
mov ecx,9
l1:
push[esi]
inc esi
loop l1

mov ecx,9
mov edi,des
l2:
pop eax
mov [edi],eax
inc edi
loop l2

mov esi,des
mov ecx,9
l6:
mov eax,[esi]
call writechar
inc esi
loop l6


ret
Str_concat_rev ENDP
end main