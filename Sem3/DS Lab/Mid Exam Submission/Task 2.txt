#include <iostream>
using namespace std;

const int Max = 10;

class stack
{
	int top;
public:
	char arr[Max];
	int count1;
	int count2;
	int countE;
	stack()
	{
		top = -1;
		count1=0;
		count2=0;
		countE=0;
	}

	bool isFull() { return top >= (Max - 1); }
	bool isEmpty() { return top < 0; }

	char pop()
	{
		if (isEmpty())
		{
			cout << "Stack is Empty\n";
			return '!';
		}
		else
		{
			countE--;
			return arr[top--];
		}
	}

	char peek()
	{
		if (isEmpty())
		{
			cout << "Stack is Empty\n";
			return '!';
		}
		else
		{
			return arr[top];
		}
	}

	bool push(char x)
	{
		if (isFull())
		{
			cout << "Stack Is Full\n";
			return false;
		}
		else
		{
			if(x==')')
			{
				count1++;
			}
			countE++;
			cout << x << "Is Pushed Into Stack\n";
			arr[++top] = x;
			return true;
		}
	}
	
	void fun2(int i,int j)
	{
		cout<<"Duplicate () found in sub-expression ";
		while(j<=i)
		{
			cout<<arr[j];
			j++;
		}
		cout<<endl;
	}
	
	void fun()
	{
		for(int i=countE-1;i>0;i--)
		{
			if(arr[i]==')')
				{
					for(int j=i;j>0;j--)
					{
						if(arr[j]=='(' && arr[j-1] !='(');
						{
							fun2(i,j);
						//	exit(1);
						}
					}
				}
		}
	}
	
	
	
};

void implementation()
{

	/*stack s1;
	for (int i = 10; i > -1; i--)
	{
		s1.push(i);
	}

	cout << "\n";
	while (!s1.isEmpty())
	{
		cout << s1.peek() << "\n";
		int p = s1.pop();
	}

	cout << "\n" << s1.peek();
*/

}

int main()
{
	stack s1;
	string str1;
	string str2="((x+y))+z";
	cout<<"Enter Expression:";
	cin>>str1;
	for(int i=0;i<str1.size();i++)
	{
		s1.push(str1[i]);
	}
	
	s1.fun();	
	

	/*
	((x+y))+z
	(x+y)
	((x+y)+((z)))
	
	*/
	return 0;
}